@page "/account/profile"
@attribute [Authorize]

@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Strings> L
@inject IMatToaster matToaster

<h1>@L["User Profile"]</h1>
<p>User profile management.</p>
@if (userInfo == null)
{
    <LoadingBackground ShowLogoBox="true"></LoadingBackground>
}
else
{
    @if (userInfo.HasPassword)
    {
        <MatButton Icon="rotate_right" OnClick="@(() => OpenUpdatePasswordDialog())" Label=@L["Change Password"] Raised="true" class="form-group d-flex justify-content-end"></MatButton>
    }
    <EditForm Model="@userInfo" OnValidSubmit="@UpdateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@userInfo.UserName" Label=@L["UserName"] Icon="person" IconTrailing="true" FullWidth="true" Required="true" ReadOnly="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@userInfo.Email" Label="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@userInfo.FirstName" Label=@L["FirstName"] FullWidth="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@userInfo.LastName" Label=@L["LastName"] FullWidth="true"></MatTextField>
            </div>
            <div class="form-group">
                <strong>@L["Roles"]</strong><br />
                <MatChipSet>
                    @foreach (var role in userInfo.Roles)
                    {
                        <MatChip Label="@role"></MatChip>
                    }
                </MatChipSet>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MatButton Type="submit" Raised="true">@L["Update"]</MatButton>
            </div>
        </fieldset>
    </EditForm>

    <MatDialog @bind-IsOpen="@updatePasswordDialogOpen">
        <MatDialogTitle>Password Update for @userInfo.UserName</MatDialogTitle>
        <MatDialogContent>
            <EditForm Model="@passwordParameters" OnValidSubmit="@UpdatePasswordAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MatTextField @bind-Value="@passwordParameters.CurrentPassword" Label=@L["CurrentPassword"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@passwordParameters.NewPassword" Label=@L["NewPassword"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                    <div class="form-group">
                        <MatTextField @bind-Value="@passwordParameters.NewPasswordConfirm" Label=@L["Password Confirmation"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
                    </div>
                </fieldset>
            </EditForm>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { updatePasswordDialogOpen = false; })">@L["Cancel"]</MatButton>
            <MatButton OnClick="@UpdatePasswordAsync">@L["Update Password"]</MatButton>
        </MatDialogActions>
    </MatDialog>

}
@code {
    UserInfoDto userInfo;
    bool updatePasswordDialogOpen = false;
    UpdatePasswordDto passwordParameters { get; set; } = new UpdatePasswordDto();

    protected override async Task OnInitializedAsync()
    {
        userInfo = await ((IdentityAuthenticationStateProvider)authStateProvider).GetUserInfo();
    }

    public void OpenUpdatePasswordDialog()
    {
        passwordParameters = new UpdatePasswordDto();
        updatePasswordDialogOpen = true;
    }

    public async Task UpdatePasswordAsync()
    {
        if (passwordParameters.NewPassword != passwordParameters.NewPasswordConfirm)
        {
            matToaster.Add(L["PasswordConfirmationFailed"], MatToastType.Warning);
        }
        else
        {
            var apiResponse = await Http.PostJsonAsync<ApiResponseDto>($"api/Account/UpdatePassword", passwordParameters);

            if (apiResponse.IsSuccessStatusCode)
                matToaster.Add(L["UpdatePasswordSuccessful"], MatToastType.Success);
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["UpdatePasswordFailed"]);

            updatePasswordDialogOpen = false;
        }
    }

    async Task UpdateUser()
    {
        try
        {
            var apiResponse = await ((IdentityAuthenticationStateProvider)authStateProvider).UpdateUser(userInfo);

            if (apiResponse.IsSuccessStatusCode)
                matToaster.Add(L["Operation Successful"], MatToastType.Success);
            else
                matToaster.Add(apiResponse.Message, MatToastType.Danger, L["Operation Failed"]);
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, L["Operation Failed"]);
        }
    }
}
